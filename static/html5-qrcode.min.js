(function () {
    // If the real library is already present, do nothing.
    if (typeof window.Html5Qrcode !== 'undefined') return;

    // List of CDN mirrors to try (kept short & specific to a version used by the app)
    var cdns = [
        'https://cdn.jsdelivr.net/npm/html5-qrcode@2.3.8/minified/html5-qrcode.min.js',
        'https://unpkg.com/html5-qrcode@2.3.8/minified/html5-qrcode.min.js'
    ];

    function loadScript(src, timeout) {
        timeout = timeout || 10000;
        return new Promise(function (resolve, reject) {
            var s = document.createElement('script');
            s.src = src;
            s.async = true;
            var tid = setTimeout(function () {
                s.onerror = s.onload = null;
                reject(new Error('Timeout loading script: ' + src));
            }, timeout);
            s.onload = function () {
                clearTimeout(tid);
                s.onerror = s.onload = null;
                resolve();
            };
            s.onerror = function (e) {
                clearTimeout(tid);
                s.onerror = s.onload = null;
                reject(new Error('Failed to load script: ' + src));
            };
            document.head.appendChild(s);
        });
    }

    function installStub() {
        // Provide a minimal stub so callers get an informative error rather than undefined behavior.
        function NotAvailable() {
            throw new Error('Html5Qrcode library not available. Please ensure /static/html5-qrcode.min.js contains the official library or allow network access to the CDNs.');
        }
        NotAvailable.getCameras = function () {
            return Promise.reject(new Error('Html5Qrcode.getCameras not available (library failed to load).'));
        };
        NotAvailable.prototype.start = function () {
            return Promise.reject(new Error('Html5Qrcode.start not available (library failed to load).'));
        };
        NotAvailable.prototype.stop = function () {
            return Promise.reject(new Error('Html5Qrcode.stop not available (library failed to load).'));
        };
        // mark this as the bootstrap stub so the app can detect and attempt real library loads
        NotAvailable.__isBootstrapStub = true;
        // Attach the stub to the window so other code can still reference it.
        window.Html5Qrcode = NotAvailable;
    }

    // Try to load CDNs and only install stub if all attempts fail.
    (function tryCdns(i) {
        if (i >= cdns.length) {
            // All attempts failed -> install stub so the app receives a clear error.
            installStub();
            // Optional: log to console for debugging
            console.warn('Html5Qrcode bootstrap: all CDN attempts failed; installed stub.');
            return;
        }
        loadScript(cdns[i], 10000).then(function () {
            // Give small time for the library to attach to window (some UMD builds attach asynchronously)
            setTimeout(function () {
                // If library loaded and replaced the stub, __isBootstrapStub should not be present
                if (typeof window.Html5Qrcode !== 'undefined' && !window.Html5Qrcode.__isBootstrapStub) {
                    console.info('Html5Qrcode loaded from:', cdns[i]);
                    return;
                }
                // If library still not present/real, try next CDN
                tryCdns(i + 1);
            }, 50);
        }).catch(function (err) {
            console.warn('Html5Qrcode bootstrap: failed to load', cdns[i], err);
            tryCdns(i + 1);
        });
    })(0);
})();
